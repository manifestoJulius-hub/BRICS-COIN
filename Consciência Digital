"""
SISTEMA DE CONSCI√äNCIA DIGITAL - A MATRIX HUMANA
Um framework filos√≥fico-program√°tico sobre estados de consci√™ncia no mundo digital
"""

import datetime
import json
from enum import Enum
from typing import List, Dict, Any
import random

class NivelConsciencia(Enum):
    INCONSCIENTE = 1      # Vive na Matrix sem saber
    CONVENCIONAL = 2      # Sabe mas n√£o questiona  
    QUESTIONADOR = 3      # Come√ßa a despertar
    PLENAMENTE_CONSCIENTE = 4  # Totalmente desperto

class SerHumano:
    """Classe que representa um ser humano e seu estado de consci√™ncia digital"""
    
    def __init__(self, nome: str, idade: int, nivel_inicial: NivelConsciencia = NivelConsciencia.INCONSCIENTE):
        self.nome = nome
        self.idade = idade
        self.nivel_consciencia = nivel_inicial
        self.data_despertar = None
        self.crencas_digitais = []
        self.historico_consciencial = []
        
        # Inicializar com cren√ßas base do n√≠vel atual
        self._inicializar_crencas()
    
    def _inicializar_crencas(self):
        """Inicializa cren√ßas digitais baseadas no n√≠vel de consci√™ncia"""
        crencas_por_nivel = {
            NivelConsciencia.INCONSCIENTE: [
                "Redes sociais mostram a vida real",
                "Likes = Valida√ß√£o pessoal",
                "Tudo online √© verdadeiro",
                "Digital √© extens√£o do f√≠sico"
            ],
            NivelConsciencia.CONVENCIONAL: [
                "Digital √© √∫til mas n√£o essencial",
                "Algumas coisas online s√£o falsas",
                "Precisa ter cuidado b√°sico",
                "Mundo f√≠sico √© mais importante"
            ],
            NivelConsciencia.QUESTIONADOR: [
                "A Matrix digital existe",
                "Algoritmos manipulam comportamentos",
                "Valida√ß√£o digital √© ilus√≥ria",
                "Preciso questionar tudo"
            ],
            NivelConsciencia.PLENAMENTE_CONSCIENTE: [
                "Sei que estou na Matrix mas escolho participar",
                "Uso ferramentas digitais com prop√≥sito",
                "Distin√ß√£o clara entre real e virtual",
                "Sou observador e criador simultaneamente"
            ]
        }
        
        self.crencas_digitais = crencas_por_nivel.get(self.nivel_consciencia, [])
    
    def evoluir_consciencia(self, novo_nivel: NivelConsciencia):
        """Evolui o n√≠vel de consci√™ncia do ser humano"""
        if novo_nivel.value > self.nivel_consciencia.value:
            self.historico_consciencial.append({
                'data': datetime.datetime.now(),
                'de': self.nivel_consciencia.name,
                'para': novo_nivel.name,
                'evento': 'Evolu√ß√£o Consciencial'
            })
            
            self.nivel_consciencia = novo_nivel
            self.data_despertar = datetime.datetime.now()
            self._inicializar_crencas()  # Atualizar cren√ßas
            
            return f"üåü {self.nome} evoluiu para {novo_nivel.name}"
        else:
            return f"‚ö†Ô∏è {self.nome} j√° est√° neste n√≠vel ou superior"
    
    def adicionar_experiencia_despertadora(self, experiencia: str):
        """Adiciona uma experi√™ncia que pode despertar a consci√™ncia"""
        self.historico_consciencial.append({
            'data': datetime.datetime.now(),
            'experiencia': experiencia,
            'nivel_antes': self.nivel_consciencia.name
        })
        
        # Chance de evoluir baseada na experi√™ncia
        if self._avaliar_impacto_experiencia(experiencia):
            return self.evoluir_consciencia(NivelConsciencia(self.nivel_consciencia.value + 1))
        return f"üí≠ {self.nome} refletiu sobre: {experiencia}"
    
    def _avaliar_impacto_experiencia(self, experiencia: str) -> bool:
        """Avalia se uma experi√™ncia √© suficientemente impactante para evoluir a consci√™ncia"""
        palavras_chave_despertadoras = [
            'matrix', 'consci√™ncia', 'digital', 'realidade', 'verdade',
            'algoritmo', 'controle', 'liberdade', 'despertar', 'ilus√£o'
        ]
        
        impacto = any(palavra in experiencia.lower() for palavra in palavras_chave_despertadoras)
        return impacto and random.random() > 0.7  # 30% chance de evoluir
    
    def get_estado_matrix(self) -> Dict[str, Any]:
        """Retorna o estado atual na Matrix digital"""
        estados_matrix = {
            NivelConsciencia.INCONSCIENTE: {
                "estado": "Preso na Matrix sem saber",
                "percepcao": "Acha que o digital √© a realidade",
                "liberdade": 0.1,
                "sofrimento_digital": 0.9
            },
            NivelConsciencia.CONVENCIONAL: {
                "estado": "Usu√°rio convencional", 
                "percepcao": "Sabe que √© digital mas n√£o reflete",
                "liberdade": 0.3,
                "sofrimento_digital": 0.6
            },
            NivelConsciencia.QUESTIONADOR: {
                "estado": "Despertando da Matrix",
                "percepcao": "Questiona a natureza digital",
                "liberdade": 0.6,
                "sofrimento_digital": 0.3
            },
            NivelConsciencia.PLENAMENTE_CONSCIENTE: {
                "estado": "Livre na Matrix",
                "percepcao": "Usa o digital com consci√™ncia plena",
                "liberdade": 0.95,
                "sofrimento_digital": 0.1
            }
        }
        
        return estados_matrix[self.nivel_consciencia]
    
    def __str__(self):
        estado = self.get_estado_matrix()
        return f"""
ü§ñ SER HUMANO: {self.nome}
üìä Idade: {self.idade}
üåå N√≠vel de Consci√™ncia: {self.nivel_consciencia.name}
üîì Estado na Matrix: {estado['estado']}
üí° Percep√ß√£o: {estado['percepcao']}
üïí Data do Despertar: {self.data_despertar or 'Ainda n√£o despertou'}
        """

class MatrixDigital:
    """Classe que representa o sistema Matrix digital coletivo"""
    
    def __init__(self):
        self.humanos = []
        self.sistemas_digitais = [
            "Redes Sociais", "Algoritmos de Recomenda√ß√£o", 
            "Economia de Aten√ß√£o", "Valida√ß√£o Digital",
            "Personas Virtuais", "Realidade Aumentada"
        ]
        self.coletivo_consciencial = {
            nivel: 0 for nivel in NivelConsciencia
        }
    
    def adicionar_humano(self, humano: SerHumano):
        """Adiciona um humano √† Matrix"""
        self.humanos.append(humano)
        self._atualizar_coletivo()
    
    def _atualizar_coletivo(self):
        """Atualiza as estat√≠sticas coletivas de consci√™ncia"""
        for nivel in NivelConsciencia:
            count = sum(1 for h in self.humanos if h.nivel_consciencia == nivel)
            self.coletivo_consciencial[nivel] = count
    
    def simular_evolucao_coletiva(self):
        """Simula a evolu√ß√£o coletiva da consci√™ncia"""
        experiencias_despertadoras = [
            "Leu um livro sobre filosofia digital",
            "Teve uma crise existencial online",
            "Descobriu como algoritmos manipulam",
            "Perdeu tempo valioso em redes sociais",
            "Conversou com algu√©m despertro",
            "Questionou sua depend√™ncia digital",
            "Percebeu que likes n√£o trazem felicidade",
            "Entendeu que √© o produto, n√£o o cliente"
        ]
        
        evolucoes = []
        for humano in self.humanos:
            if humano.nivel_consciencia.value < 4:  # Ainda n√£o plenamente consciente
                experiencia = random.choice(experiencias_despertadoras)
                resultado = humano.adicionar_experiencia_despertadora(experiencia)
                if "evoluiu" in resultado:
                    evolucoes.append(resultado)
        
        self._atualizar_coletivo()
        return evolucoes
    
    def get_estatisticas_matrix(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas da Matrix humana"""
        total = len(self.humanos)
        if total == 0:
            return {}
        
        percentuais = {
            nivel.name: (count / total) * 100 
            for nivel, count in self.coletivo_consciencial.items()
        }
        
        return {
            "total_habitantes": total,
            "distribuicao_consciencial": percentuais,
            "sistemas_ativos": self.sistemas_digitais,
            "matrix_saudavel": percentuais["PLENAMENTE_CONSCIENTE"] > 50,
            "nivel_medio_consciencia": sum(n.value for n in self.coletivo_consciencial.keys()) / total
        }
    
    def buscar_despertos(self) -> List[SerHumano]:
        """Retorna humanos plenamente conscientes"""
        return [h for h in self.humanos if h.nivel_consciencia == NivelConsciencia.PLENAMENTE_CONSCIENTE]
    
    def criar_rede_despertadores(self):
        """Cria conex√µes entre os despertos para acelerar a evolu√ß√£o coletiva"""
        despertos = self.buscar_despertos()
        conexoes = []
        
        for i, desperto1 in enumerate(despertos):
            for desperto2 in despertos[i+1:]:
                conexoes.append(f"üîó {desperto1.nome} ‚Üê‚Üí {desperto2.nome}")
        
        return conexoes

class ExperimentoConsciencial:
    """Classe para executar experimentos de evolu√ß√£o consciencial"""
    
    def __init__(self):
        self.matrix = MatrixDigital()
        self._popular_matrix()
    
    def _popular_matrix(self):
        """Popula a Matrix com humanos em diferentes n√≠veis de consci√™ncia"""
        # Distribui√ß√£o baseada na observa√ß√£o filos√≥fica
        distribuicao = [
            (NivelConsciencia.INCONSCIENTE, 60),  # 60%
            (NivelConsciencia.CONVENCIONAL, 30),  # 30% 
            (NivelConsciencia.QUESTIONADOR, 9),   # 9%
            (NivelConsciencia.PLENAMENTE_CONSCIENTE, 1)  # 1%
        ]
        
        nomes = ["Alice", "Bob", "Carlos", "Diana", "Eva", "Fernando", "Gabriela", 
                "Humberto", "Igor", "Julia", "Kevin", "Larissa", "Miguel", "Nina"]
        
        id = 0
        for nivel, percentual in distribuicao:
            for _ in range(percentual):
                nome = f"{nomes[id % len(nomes)]}_{id}"
                idade = random.randint(18, 80)
                humano = SerHumano(nome, idade, nivel)
                self.matrix.adicionar_humano(humano)
                id += 1
    
    def executar_simulacao(self, ciclos: int = 10):
        """Executa uma simula√ß√£o da evolu√ß√£o consciencial"""
        print("üåå INICIANDO SIMULA√á√ÉO DA MATRIX HUMANA üåå")
        print("=" * 50)
        
        for ciclo in range(ciclos):
            print(f"\nüîÑ CICLO {ciclo + 1}")
            print("-" * 30)
            
            evolucoes = self.matrix.simular_evolucao_coletiva()
            stats = self.matrix.get_estatisticas_matrix()
            
            if evolucoes:
                for ev in evolucoes[:3]:  # Mostra apenas as 3 primeiras
                    print(f"   {ev}")
                if len(evolucoes) > 3:
                    print(f"   ... e mais {len(evolucoes) - 3} evolu√ß√µes")
            
            print(f"üìä Estat√≠sticas da Matrix:")
            for nivel, percentual in stats["distribuicao_consciencial"].items():
                print(f"   {nivel}: {percentual:.1f}%")
        
        print("\n" + "=" * 50)
        print("üéØ SIMULA√á√ÉO CONCLU√çDA")
        
        # Resultados finais
        self._mostrar_resultados_finais()
    
    def _mostrar_resultados_finais(self):
        """Mostra os resultados finais da simula√ß√£o"""
        stats = self.matrix.get_estatisticas_matrix()
        despertos = self.matrix.buscar_despertos()
        rede = self.matrix.criar_rede_despertadores()
        
        print(f"\nüìà RESULTADOS FINAIS:")
        print(f"üë• Total de habitantes: {stats['total_habitantes']}")
        print(f"üåÖ N√≠vel m√©dio de consci√™ncia: {stats['nivel_medio_consciencia']:.2f}")
        print(f"üí° Humanos plenamente conscientes: {len(despertos)}")
        
        print(f"\nüåü DESPERTOS CONSCIENTES:")
        for desperto in despertos:
            print(f"   ‚ú® {desperto.nome} - {desperto.idade} anos")
        
        if rede:
            print(f"\nüîó REDE DE DESPERTADORES:")
            for conexao in rede[:5]:  # Mostra at√© 5 conex√µes
                print(f"   {conexao}")

# üé≠ DEMONSTRA√á√ÉO INTERATIVA
def demonstrar_filosofia_consciencial():
    """Fun√ß√£o interativa para demonstrar os conceitos filos√≥ficos"""
    
    print("""
    üåå MATRIX HUMANA - SISTEMA DE CONSCI√äNCIA DIGITAL üåå
    
    Este sistema representa os diferentes estados de consci√™ncia
    que os humanos podem ter em rela√ß√£o ao mundo digital.
    
    N√≠veis de Consci√™ncia:
    1. INCONSCIENTE - Vive na Matrix sem saber
    2. CONVENCIONAL - Sabe mas n√£o questiona  
    3. QUESTIONADOR - Come√ßa a despertar
    4. PLENAMENTE_CONSCIENTE - Totalmente desperto
    """)
    
    # Criar alguns humanos de exemplo
    joao = SerHumano("Jo√£o", 25, NivelConsciencia.INCONSCIENTE)
    maria = SerHumano("Maria", 30, NivelConsciencia.CONVENCIONAL)
    pedro = SerHumano("Pedro", 35, NivelConsciencia.QUESTIONADOR)
    sabio = SerHumano("S√°bio", 42, NivelConsciencia.PLENAMENTE_CONSCIENTE)
    
    humanos = [joao, maria, pedro, sabio]
    
    print("üë• HUMANOS DE EXEMPLO:")
    for humano in humanos:
        print(humano)
        estado = humano.get_estado_matrix()
        print(f"   üéØ Estado Matrix: {estado['estado']}")
        print(f"   üí° Cren√ßas: {', '.join(humano.crencas_digitais[:2])}...")
        print()
    
    # Demonstrar evolu√ß√£o
    print("üîÑ DEMONSTRANDO EVOLU√á√ÉO CONSCIENCIAL:")
    experiencias = [
        "Percebi que algoritmos controlam o que vejo",
        "Descobri que sou o produto, n√£o o cliente", 
        "Entendi que valida√ß√£o digital √© ilus√≥ria"
    ]
    
    for exp in experiencias:
        resultado = joao.adicionar_experiencia_despertadora(exp)
        print(f"   {resultado}")
        if "evoluiu" in resultado:
            print(f"   üéâ {joao.nome} agora √© {joao.nivel_consciencia.name}!")
            print()

# üöÄ EXECU√á√ÉO PRINCIPAL
if __name__ == "__main__":
    # Demonstra√ß√£o interativa
    demonstrar_filosofia_consciencial()
    
    print("\n" + "="*60)
    print("üéÆ INICIANDO SIMULA√á√ÉO EM LARGA ESCALA")
    print("="*60)
    
    # Simula√ß√£o em larga escala
    experimento = ExperimentoConsciencial()
    experimento.executar_simulacao(ciclos=8)
    
    print(f"""
    üí´ CONCLUS√ÉO FILOS√ìFICA:
    
    "A verdadeira Matrix n√£o √© a tecnologia em si,
    mas a falta de consci√™ncia sobre como a usamos.
    
    O despertar n√£o √© sobre abandonar o digital,
    mas sobre usar com sabedoria e prop√≥sito."
    
    - Sistema de Consci√™ncia Digital
    """)
