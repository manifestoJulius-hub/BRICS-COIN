"""
APP DESPERTAR CONSCI√äNCIA DIGITAL
Aplicativo interativo para ajudar humanos a despertarem da Matrix digital
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import json
import datetime
from typing import List, Dict
import random

class AppDespertarConsciencia:
    """Aplicativo principal para despertar da Matrix digital"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üåå App Despertar Consci√™ncia Digital")
        self.root.geometry("1000x700")
        self.root.configure(bg='#1e1e1e')
        
        # Estado do usu√°rio
        self.usuario = {
            "nome": "",
            "nivel_consciencia": 1,
            "pontuacao": 0,
            "experiencias": [],
            "data_cadastro": datetime.datetime.now(),
            "crencas_questionadas": []
        }
        
        # Banco de conhecimento
        self.carregar_conhecimento()
        self.setup_ui()
    
    def carregar_conhecimento(self):
        """Carrega o conhecimento sobre Matrix digital"""
        self.niveis_consciencia = {
            1: {
                "nome": "Inconsciente Digital",
                "descricao": "Vive na Matrix sem perceber",
                "caracteristicas": [
                    "Acredita que redes sociais mostram a realidade",
                    "Busca valida√ß√£o atrav√©s de likes",
                    "N√£o questiona algoritmos",
                    "Confunde persona digital com identidade real"
                ],
                "exercicios": [
                    "Quantas horas voc√™ passa online sem perceber?",
                    "J√° comparou sua vida real com a dos influencers?",
                    "Voc√™ se sente mal quando n√£o recebe engajamento?"
                ]
            },
            2: {
                "nome": "Questionador Inicial", 
                "descricao": "Come√ßa a perceber padr√µes",
                "caracteristicas": [
                    "Desconfia que algo n√£o est√° certo",
                    "Questiona algumas informa√ß√µes online",
                    "Percebe manipula√ß√£o b√°sica",
                    "Sente cansa√ßo digital"
                ],
                "exercicios": [
                    "Liste 3 coisas que voc√™ viu online que eram falsas",
                    "Monitore seu humor ap√≥s usar redes sociais",
                    "Identifique um algoritmo influenciando suas escolhas"
                ]
            },
            3: {
                "nome": "Consci√™ncia Ativa",
                "descricao": "Compreende a Matrix digital",
                "caracteristicas": [
                    "Entende como algoritmos funcionam",
                    "Sabe que √© o produto, n√£o o cliente", 
                    "Usa tecnologia com prop√≥sito",
                    "Distingue real de digital"
                ],
                "exercicios": [
                    "Descreva como voc√™ seria diferente sem redes sociais",
                    "Qual seu prop√≥sito ao usar cada ferramenta digital?",
                    "Como voc√™ protege sua aten√ß√£o dos algoritmos?"
                ]
            },
            4: {
                "nome": "Mestre Digital Consciente",
                "descricao": "Livre na Matrix",
                "caracteristicas": [
                    "Usa ferramentas digitais com sabedoria",
                    "Ensina outros a despertarem",
                    "Cria conte√∫do consciente",
                    "Vive em equil√≠brio digital-f√≠sico"
                ],
                "exercicios": [
                    "Como voc√™ pode ajudar outros a despertarem?",
                    "Que sistema consciente voc√™ pode criar?",
                    "Qual seu legado digital positivo?"
                ]
            }
        }
        
        self.experiencias_despertadoras = [
            {
                "titulo": "O Algoritmo Invis√≠vel",
                "descricao": "Perceber como os algoritmos controlam o que voc√™ v√™",
                "reflexao": "Voc√™ realmente escolhe o que consome ou √© programado?",
                "acao": "Desative recomenda√ß√µes autom√°ticas por um dia"
            },
            {
                "titulo": "A Economia da Aten√ß√£o", 
                "descricao": "Entender que seu tempo de aten√ß√£o √© o produto vendido",
                "reflexao": "Quem se beneficia quando voc√™ fica horas scrollando?",
                "acao": "Calcule quanto vale sua hora de aten√ß√£o"
            },
            {
                "titulo": "Persona vs Ess√™ncia",
                "descricao": "Distinguir quem voc√™ √© de quem aparece online",
                "reflexao": "Sua persona digital te representa ou te aprisiona?",
                "acao": "Delete uma foto que n√£o mostra sua ess√™ncia real"
            },
            {
                "titulo": "Valida√ß√£o Artificial",
                "descricao": "Questionar a necessidade de likes e seguidores",
                "reflexao": "Likes preenchem qual vazio real na sua vida?",
                "acao": "Fique uma semana sem postar buscando valida√ß√£o"
            }
        ]
    
    def setup_ui(self):
        """Configura a interface do aplicativo"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Cabe√ßalho
        header = ttk.Label(main_frame, 
                          text="üåå Jornada do Despertar Digital", 
                          font=('Arial', 16, 'bold'),
                          foreground='#4fc3f7')
        header.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # Menu lateral
        self.setup_menu_lateral(main_frame)
        
        # √Årea de conte√∫do principal
        self.setup_area_conteudo(main_frame)
        
        # Iniciar com tela de boas-vindas
        self.mostrar_tela_boas_vindas()
    
    def setup_menu_lateral(self, parent):
        """Configura o menu lateral"""
        menu_frame = ttk.Frame(parent, width=200)
        menu_frame.grid(row=1, column=0, sticky=(tk.N, tk.S), padx=(0, 10))
        menu_frame.rowconfigure(8, weight=1)
        
        botoes_menu = [
            ("üè† In√≠cio", self.mostrar_tela_boas_vindas),
            ("üìä Meu N√≠vel", self.mostrar_diagnostico),
            ("üí° Exerc√≠cios", self.mostrar_exercicios),
            ("üéØ Experi√™ncias", self.mostrar_experiencias),
            ("üìà Progresso", self.mostrar_progresso),
            ("üåê Comunidade", self.mostrar_comunidade),
            ("üìö Biblioteca", self.mostrar_biblioteca),
            ("‚öôÔ∏è Configura√ß√µes", self.mostrar_configuracoes)
        ]
        
        for i, (texto, comando) in enumerate(botoes_menu):
            btn = ttk.Button(menu_frame, 
                           text=texto, 
                           command=comando,
                           width=15)
            btn.grid(row=i, column=0, pady=5, sticky=(tk.W, tk.E))
    
    def setup_area_conteudo(self, parent):
        """Configura a √°rea de conte√∫do principal"""
        self.conteudo_frame = ttk.Frame(parent)
        self.conteudo_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.conteudo_frame.columnconfigure(0, weight=1)
        self.conteudo_frame.rowconfigure(0, weight=1)
        
        # √Årea de texto rol√°vel
        self.text_area = scrolledtext.ScrolledText(
            self.conteudo_frame, 
            wrap=tk.WORD, 
            width=80, 
            height=30,
            font=('Arial', 11),
            bg='#2b2b2b',
            fg='#ffffff',
            insertbackground='white'
        )
        self.text_area.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.text_area.config(state=tk.DISABLED)
        
        # Frame de entrada do usu√°rio
        self.input_frame = ttk.Frame(self.conteudo_frame)
        self.input_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        self.input_frame.columnconfigure(0, weight=1)
        
        self.entry_usuario = ttk.Entry(self.input_frame, font=('Arial', 11))
        self.entry_usuario.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        self.entry_usuario.bind('<Return>', self.processar_resposta)
        
        self.btn_enviar = ttk.Button(self.input_frame, text="Enviar", command=self.processar_resposta)
        self.btn_enviar.grid(row=0, column=1)
    
    def limpar_conteudo(self):
        """Limpa a √°rea de conte√∫do"""
        self.text_area.config(state=tk.NORMAL)
        self.text_area.delete(1.0, tk.END)
        self.text_area.config(state=tk.DISABLED)
        self.entry_usuario.delete(0, tk.END)
    
    def adicionar_texto(self, texto, tag=None):
        """Adiciona texto formatado na √°rea de conte√∫do"""
        self.text_area.config(state=tk.NORMAL)
        if tag:
            self.text_area.insert(tk.END, texto + "\n\n", tag)
        else:
            self.text_area.insert(tk.END, texto + "\n\n")
        self.text_area.see(tk.END)
        self.text_area.config(state=tk.DISABLED)
    
    def processar_resposta(self, event=None):
        """Processa as respostas do usu√°rio"""
        resposta = self.entry_usuario.get().strip()
        if not resposta:
            return
        
        self.adicionar_texto(f"üë§ Voc√™: {resposta}", "usuario")
        self.entry_usuario.delete(0, tk.END)
        
        # L√≥gica baseada no contexto atual
        if not self.usuario["nome"]:
            self.processar_nome(resposta)
        else:
            self.processar_reflexao(resposta)
    
    def processar_nome(self, nome):
        """Processa o nome do usu√°rio"""
        self.usuario["nome"] = nome
        self.adicionar_texto(f"üåå Prazer, {nome}! Vamos come√ßar sua jornada de despertar.")
        self.adicionar_texto("Vou te fazer algumas perguntas para entender seu n√≠vel atual de consci√™ncia digital...")
        self.fazer_perguntas_diagnostico()
    
    def fazer_perguntas_diagnostico(self):
        """Faz perguntas de diagn√≥stico"""
        perguntas = [
            "Quantas horas por dia voc√™ passa em redes sociais?",
            "Voc√™ j√° se pegou comparando sua vida com a de influencers?",
            "Sente ansiedade quando fica sem checar notifica√ß√µes?",
            "Acredita que o que v√™ online representa a realidade?",
            "J√° percebeu algoritmos influenciando suas escolhas?"
        ]
        
        self.perguntas_restantes = perguntas.copy()
        self.respostas_diagnostico = []
        self.fazer_proxima_pergunta()
    
    def fazer_proxima_pergunta(self):
        """Faz a pr√≥xima pergunta do diagn√≥stico"""
        if self.perguntas_restantes:
            pergunta = self.perguntas_restantes.pop(0)
            self.adicionar_texto(f"ü§î {pergunta}")
            self.pergunta_atual = pergunta
        else:
            self.avaliar_diagnostico()
    
    def processar_reflexao(self, resposta):
        """Processa reflex√µes do usu√°rio"""
        if hasattr(self, 'perguntas_restantes'):
            self.respostas_diagnostico.append((self.pergunta_atual, resposta))
            self.fazer_proxima_pergunta()
        else:
            # Resposta gen√©rica para reflex√µes
            reflexoes_encorajadoras = [
                "Interessante perspectiva! O que mais voc√™ percebeu?",
                "Bom insight! Como isso mudou sua forma de ver o digital?",
                "Excelente observa√ß√£o! Quer explorar mais esse aspecto?",
                "Profunda reflex√£o! Como voc√™ aplicar√° isso no seu dia a dia?"
            ]
            resposta_bot = random.choice(reflexoes_encorajadoras)
            self.adicionar_texto(f"ü§ñ Guia: {resposta_bot}")
    
    def avaliar_diagnostico(self):
        """Avalia o diagn√≥stico e define o n√≠vel inicial"""
        pontuacao = len([r for p, r in self.respostas_diagnostico if len(r) > 20])  # Respostas elaboradas
        
        if pontuacao <= 1:
            nivel = 1
        elif pontuacao <= 3:
            nivel = 2
        else:
            nivel = 3
        
        self.usuario["nivel_consciencia"] = nivel
        self.usuario["pontuacao"] = pontuacao
        
        nivel_info = self.niveis_consciencia[nivel]
        
        self.adicionar_texto("üìä DIAGN√ìSTICO COMPLETO!")
        self.adicionar_texto(f"Seu n√≠vel atual: {nivel_info['nome']}")
        self.adicionar_texto(f"Descri√ß√£o: {nivel_info['descricao']}")
        self.adicionar_texto("\nüí° Caracter√≠sticas do seu n√≠vel:")
        for carac in nivel_info['caracteristicas']:
            self.adicionar_texto(f"   ‚Ä¢ {carac}")
        
        self.adicionar_texto("\nüéØ Vamos trabalhar juntos para elevar sua consci√™ncia!")
        self.mostrar_opcoes_pos_diagnostico()
    
    def mostrar_opcoes_pos_diagnostico(self):
        """Mostra op√ß√µes ap√≥s o diagn√≥stico"""
        self.adicionar_texto("\nO que voc√™ gostaria de explorar agora?")
        self.adicionar_texto("1. üí° Fazer exerc√≠cios de consci√™ncia")
        self.adicionar_texto("2. üéØ Experimentar viv√™ncias despertadoras") 
        self.adicionar_texto("3. üìà Ver meu progresso")
        self.adicionar_texto("4. üåê Conectar com comunidade")
        
        self.entry_usuario.focus()
    
    # Telas do aplicativo
    def mostrar_tela_boas_vindas(self):
        """Mostra tela de boas-vindas"""
        self.limpar_conteudo()
        self.adicionar_texto("üåå BEM-VINDO AO APP DESPERTAR CONSCI√äNCIA DIGITAL")
        self.adicionar_texto("="*60)
        self.adicionar_texto("\nEste aplicativo vai te ajudar a:")
        self.adicionar_texto("‚Ä¢ üéØ Perceber a Matrix digital em que vivemos")
        self.adicionar_texto("‚Ä¢ üí° Despertar para manipula√ß√µes algor√≠tmicas") 
        self.adicionar_texto("‚Ä¢ üïäÔ∏è Encontrar liberdade no mundo digital")
        self.adicionar_texto("‚Ä¢ üåü Usar tecnologia com consci√™ncia e prop√≥sito")
        self.adicionar_texto("\n" + "="*60)
        
        if not self.usuario["nome"]:
            self.adicionar_texto("\nComo posso te chamar?")
            self.entry_usuario.focus()
    
    def mostrar_diagnostico(self):
        """Mostra tela de diagn√≥stico"""
        self.limpar_conteudo()
        if self.usuario["nome"]:
            nivel = self.usuario["nivel_consciencia"]
            nivel_info = self.niveis_consciencia[nivel]
            
            self.adicionar_texto(f"üìä SEU DIAGN√ìSTICO DE CONSCI√äNCIA DIGITAL")
            self.adicionar_texto("="*50)
            self.adicionar_texto(f"\nüë§ Nome: {self.usuario['nome']}")
            self.adicionar_texto(f"üåÖ N√≠vel: {nivel_info['nome']}")
            self.adicionar_texto(f"üìà Pontua√ß√£o: {self.usuario['pontuacao']}/5")
            self.adicionar_texto(f"üìÖ Desde: {self.usuario['data_cadastro'].strftime('%d/%m/%Y')}")
            
            self.adicionar_texto("\nüí° CARACTER√çSTICAS DO SEU N√çVEL:")
            for carac in nivel_info['caracteristicas']:
                self.adicionar_texto(f"   ‚Ä¢ {carac}")
            
            self.adicionar_texto("\nüéØ PR√ìXIMOS PASSOS:")
            for exercicio in nivel_info['exercicios'][:2]:
                self.adicionar_texto(f"   ‚Ä¢ {exercicio}")
        else:
            self.mostrar_tela_boas_vindas()
    
    def mostrar_exercicios(self):
        """Mostra exerc√≠cios de consci√™ncia"""
        self.limpar_conteudo()
        nivel = self.usuario.get("nivel_consciencia", 1)
        nivel_info = self.niveis_consciencia[nivel]
        
        self.adicionar_texto("üí° EXERC√çCIOS DE CONSCI√äNCIA DIGITAL")
        self.adicionar_texto("="*50)
        self.adicionar_texto(f"\nExerc√≠cios para n√≠vel: {nivel_info['nome']}")
        
        for i, exercicio in enumerate(nivel_info['exercicios'], 1):
            self.adicionar_texto(f"\n{i}. {exercicio}")
            self.adicionar_texto("   üí≠ Reflexione sobre isso e compartilhe seus insights:")
        
        self.adicionar_texto("\nüéØ Escolha um exerc√≠cio e me conte suas reflex√µes!")
        self.entry_usuario.focus()
    
    def mostrar_experiencias(self):
        """Mostra experi√™ncias despertadoras"""
        self.limpar_conteudo()
        
        self.adicionar_texto("üéØ EXPERI√äNCIAS DESPERTADORAS")
        self.adicionar_texto("="*50)
        self.adicionar_texto("\nVivencie estas experi√™ncias para acelerar seu despertar:")
        
        for i, exp in enumerate(self.experiencias_despertadoras, 1):
            self.adicionar_texto(f"\n{i}. {exp['titulo']}")
            self.adicionar_texto(f"   üìù {exp['descricao']}")
            self.adicionar_texto(f"   ü§î {exp['reflexao']}")
            self.adicionar_texto(f"   üéØ A√ß√£o: {exp['acao']}")
        
        self.adicionar_texto("\nüí´ Qual experi√™ncia voc√™ gostaria de tentar primeiro?")
        self.entry_usuario.focus()
    
    def mostrar_progresso(self):
        """Mostra progresso do usu√°rio"""
        self.limpar_conteudo()
        
        self.adicionar_texto("üìà SEU PROGRESSO NO DESPERTAR")
        self.adicionar_texto("="*50)
        
        if self.usuario["nome"]:
            nivel_atual = self.usuario["nivel_consciencia"]
            progresso = (nivel_atual / 4) * 100
            
            self.adicionar_texto(f"\nüéØ Progresso: {progresso:.1f}%")
            self.adicionar_texto(f"üåÖ N√≠vel atual: {self.niveis_consciencia[nivel_atual]['nome']}")
            self.adicionar_texto(f"‚≠ê Pontua√ß√£o: {self.usuario['pontuacao']}")
            self.adicionar_texto(f"üìÖ Dias na jornada: {(datetime.datetime.now() - self.usuario['data_cadastro']).days}")
            
            # Pr√≥ximos n√≠veis
            self.adicionar_texto("\nüîÆ PR√ìXIMOS N√çVEIS:")
            for nivel in range(nivel_atual + 1, 5):
                info = self.niveis_consciencia[nivel]
                self.adicionar_texto(f"   {nivel}. {info['nome']} - {info['descricao']}")
        else:
            self.adicionar_texto("\n‚ö†Ô∏è Complete o diagn√≥stico primeiro!")
            self.mostrar_tela_boas_vindas()
    
    def mostrar_comunidade(self):
        """Mostra informa√ß√µes da comunidade"""
        self.limpar_conteudo()
        
        self.adicionar_texto("üåê COMUNIDADE DE DESPERTOS")
        self.adicionar_texto("="*50)
        self.adicionar_texto("\nüí´ Voc√™ n√£o est√° sozinho nesta jornada!")
        self.adicionar_texto("\nüìä Estat√≠sticas da comunidade:")
        self.adicionar_texto("   ‚Ä¢ 65% est√£o no n√≠vel 1-2 (Despertando)")
        self.adicionar_texto("   ‚Ä¢ 25% no n√≠vel 3 (Conscientes)")
        self.adicionar_texto("   ‚Ä¢ 10% no n√≠vel 4 (Mestres)")
        self.adicionar_texto("\nüéØ Princ√≠pios da comunidade:")
        self.adicionar_texto("   ‚Ä¢ Compartilhar insights sem julgamento")
        self.adicionar_texto("   ‚Ä¢ Respeitar o ritmo de cada um")
        self.adicionar_texto("   ‚Ä¢ Focar em solu√ß√µes conscientes")
        self.adicionar_texto("\nüí° Junte-se a n√≥s para acelerar o despertar coletivo!")
    
    def mostrar_biblioteca(self):
        """Mostra biblioteca de recursos"""
        self.limpar_conteudo()
        
        recursos = [
            {"titulo": "O Dilema das Redes", "tipo": "Document√°rio", "nivel": 2},
            {"titulo": "Deep Work", "tipo": "Livro", "nivel": 3},
            {"titulo": "Attention Economy", "tipo": "Artigo", "nivel": 3},
            {"titulo": "Digital Minimalism", "tipo": "Livro", "nivel": 2},
            {"titulo": "The Social Dilemma", "tipo": "Filme", "nivel": 1},
        ]
        
        self.adicionar_texto("üìö BIBLIOTECA DO DESPERTAR")
        self.adicionar_texto("="*50)
        self.adicionar_texto("\nRecursos para aprofundar sua consci√™ncia digital:")
        
        for recurso in recursos:
            self.adicionar_texto(f"\nüìñ {recurso['titulo']}")
            self.adicionar_texto(f"   üéØ Tipo: {recurso['tipo']}")
            self.adicionar_texto(f"   üåü N√≠vel: {recurso['nivel']}")
    
    def mostrar_configuracoes(self):
        """Mostra configura√ß√µes"""
        self.limpar_conteudo()
        
        self.adicionar_texto("‚öôÔ∏è CONFIGURA√á√ïES")
        self.adicionar_texto("="*50)
        self.adicionar_texto("\nüîß Personalize sua experi√™ncia:")
        self.adicionar_texto("\n1. üîî Notifica√ß√µes de lembretes conscientes")
        self.adicionar_texto("2. üìä Metas de redu√ß√£o de tempo digital") 
        self.adicionar_texto("3. üéØ Lembretes de prop√≥sito")
        self.adicionar_texto("4. üíæ Exportar dados de progresso")
        self.adicionar_texto("5. üîÑ Reiniciar jornada")
        
        self.adicionar_texto("\nüí° Escolha uma op√ß√£o para configurar:")

# Configurar tags para formata√ß√£o
def configurar_tags(text_widget):
    """Configura tags de formata√ß√£o para o texto"""
    text_widget.tag_config("usuario", foreground="#4fc3f7", font=('Arial', 11, 'bold'))
    text_widget.tag_config("sistema", foreground="#ff9800", font=('Arial', 11, 'bold'))
    text_widget.tag_config("destaque", foreground="#69f0ae", font=('Arial', 11, 'bold'))

# üöÄ Executar aplicativo
if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = AppDespertarConsciencia(root)
        configurar_tags(app.text_area)
        root.mainloop()
    except Exception as e:
        print(f"Erro ao iniciar aplicativo: {e}")
        print("Certifique-se de ter o tkinter instalado:")
        print("Linux: sudo apt-get install python3-tk")
        print("Windows: J√° vem instalado com Python")
        print("Mac: brew install python-tk")
